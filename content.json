{"meta":{"title":"E-CHAR-LEE","subtitle":"A site to speak and record","description":"记录生活、工作、想法","author":"Darj Lin","url":"http://echarlee.com","root":"/"},"posts":[{"tags":[{"name":"Dataprocessing/FengYun-4A","slug":"Dataprocessing-FengYun-4A","permalink":"http://echarlee.com/tags/Dataprocessing-FengYun-4A/"}],"title":"【FY4A】 0x01 数据预处理-1","date":"2020/04/06","text":"本篇将主要介绍FY-4A AGRI传感器L1/L2数据的预处理操作，目标是对实现原始的hdf或者nc格式数据进行读取、定标的操作。为了方便介绍，这里主要借助python 3.x 语言进行操作，所需要的依赖包为： 12345import os, glob, gdal, sysimport numpy as npimport matplotlib.pyplot as pltimport netCDF4 as ncimport h5py 数据读取如FY-4前序背景中介绍的那样，尽管FY-4A AGRI数据在各方面性能上显著优于FY-2 S-VISSR，数据的设置仍然保持着高度的一致性，这为数据的读取和分析降低了难度。FY-2 S-VISSR的波段信息数据存储在前缀为NOM的数据集中，可以通过GDAL包进行读取。但对FY-4数据，一个诡异的问题是，GDAL包仅能读取的9个子数据集（本例中为2000m分辨率遥感影像，输出如下），这些内容并不完整，缺少了关键的定标信息，这使得我们需要借助读写hdf/netCDF格式的包来进行解译。 12345678910111213141516[('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://CALIBRATION_COEF(SCALE+OFFSET)', '[7x2] //CALIBRATION_COEF(SCALE+OFFSET) (32-bit floating-point)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel01', '[5496x5496] //NOMChannel01 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel02', '[5496x5496] //NOMChannel02 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel03', '[5496x5496] //NOMChannel03 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel04', '[5496x5496] //NOMChannel04 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel05', '[5496x5496] //NOMChannel05 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel06', '[5496x5496] //NOMChannel06 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMChannel07', '[5496x5496] //NOMChannel07 (16-bit unsigned integer)'), ('HDF5:\"F:/FY-4/L1\\\\FY4A-_AGRI--_N_DISK_1047E_L1-_FDI-_MULT_NOM_20190304000000_20190304001459_2000M_V0001.HDF\"://NOMObsColumn', '[5496x2] //NOMObsColumn (16-bit integer)')] 而如果借助h5py和netCDF4读取文件，可以得到的数据集包括如下（共23个，除多了定标矫正的信息外，数目与官网提供的帮助文档中数据集数目一致）： 1['CALChannel01', 'CALChannel02', 'CALChannel03', 'CALChannel04', 'CALChannel05', 'CALChannel06', 'CALChannel07', 'CALIBRATION_COEF(SCALE+OFFSET)', 'CalQualityFlag', 'L0QualityFlag', 'NOMChannel01', 'NOMChannel02', 'NOMChannel03', 'NOMChannel04', 'NOMChannel05', 'NOMChannel06', 'NOMChannel07', 'NOMObsColumn', 'NOMObsTime', 'PosQualityFlag', 'VerSoftMTF', 'VerSoftNR', 'VerSoftStrayLight'] 因此考虑以此方法进行后续的操作。为了方便后续操作，这里用一个fengyun4L1的类进行封装。 12345678910111213141516class fengyun4L1: ... ... # 获取所有可用的数据集 def availableDatasets(self, getValue=False): if getValue: return list(self.h.keys()) else: for key in self.h.keys(): print(key) # 通过得到的数据集名称列表，进行进一步的数据获取 def getDatasets(self, key): return self.h[key][()] ... ... 数据定标类似的，在定标上我们还是可以借鉴FY-2数据的处理方法：通过前缀为CAL的数据集中的定标表来进行定标1。 VISSR中5个图像数据层存储的DN值，是不具有物理意义的一系列指数，其值域范围与对应通道定标表的一维数组长度一致。指数0对应定标表的第1个数值，指数为1对应定标表中第2个数值，以此类推。红外通道的指域范围为0-1023个数值，可见光通道的指数值域范围为0-63。影像中对应于非地表区域记录的数值以65535进行填充。定标表数组内的数值为定标后红外通道亮温（或反射率）。 12345678910111213141516171819202122232425262728293031323334class fengyun4L1: ... ... def cal_values_from_channel(self, channel, IR=False, showprocess=False): ''' cal_name: Name of calibration index from L1 data(could be acquired from Func:getDatasets) data_name: Name of data need to be transformed from DN to physical quantity ''' # 读取对应波段数据的名称 cal_name, data_name = 'CALChannel' + str(channel).zfill(2), 'NOMChannel' + str(channel).zfill(2) cal_index = self.getDatasets(cal_name) data_array = self.getDatasets(data_name) # 判断是哪一类数据，红外通道和可见光/近红通道的定标表量化等级不同 IR = channel in fengyun4L1.irbands out_data = [] for _ in range(data_array.shape[1]): map_data = self.__cal_values_IR(self, cal_index, data_array[:, _]) if IR else self.__cal_values_vis(self, cal_index, data_array[:, _]) out_data.append(map_data) if showprocess: self.__drawprogress(self, _, data_array.shape[1]) return np.array(out_data) @staticmethod def __cal_values_IR(self, cal_index, arr): map_data = list(map(lambda x: cal_index[x], arr)) return map_data @staticmethod def __cal_values_vis(self, cal_index, arr): map_data = list(map(lambda x: cal_index[x] if x &lt; 65535 else 65535, arr)) return map_data ... ... Reference A Contextual and Multitemporal Active-Fire Detection Algorithm Based on FengYun-2G S-VISSR Data, journal, IEEE-TGRS, 2019","permalink":"http://echarlee.com/[object%20Object]/FY4A1/","photos":[]},{"tags":[{"name":"Introduction/FengYun-4A","slug":"Introduction-FengYun-4A","permalink":"http://echarlee.com/tags/Introduction-FengYun-4A/"}],"title":"【FY4A】 0x00 前序背景","date":"2020/04/06","text":"本篇介绍了有关风云四号卫星（FengYun-4，FY-4）的一些研究必备基础知识，了解这些对获取、理解及处理相关数据有一定的帮助。 卫星简介风云四号卫星是我国第二代静止轨道遥感气象卫星，是从风云二号系列卫星（FengYun-2，FY-2）的基础上发展而来。无论是卫星的时间分辨率，还是卫星上搭载的各类传感器，相比于目前（2020-04）在轨的FY-2G/H卫星，FY-4A都有着显著的增强。这为后续的四号系列卫星发展奠定了良好的基础。1-3 主要发展目标是：卫星姿态稳定方式为三轴稳定，提高观测的时间分辨率和区域机动探测能力；提高扫描成像仪性能，以加强中小尺度天气系统的监测能力；发展大气垂直探测和微波探测，解决高轨三维遥感；发展极紫外和X射线太阳观测，加强空间天气监测预警。风云四号卫星计划发展光学和微波两种类型的卫星2。 与此前研究类似，我的关注重点是搭载在FY-4A上的AGRI（Advanced Geostationary Radiation Imager，多通道扫描成像辐射计）。这是一颗各方面性能向MSG-SEVIRI4,5（Spinning Enhanced Visible and InfraRed Imager，旋转增强型可见光及红外线成像辐射计）和Himawari-8/9-AHI(Advanced Himawari Imager，向日葵增强绘图仪)6看齐乃至更强的传感器。 Satellites FY-2F/G/H VISSR FY-4A AGRI MSG-2 SEVIRI Himawari-8/9 AHI Ch-Numbers 5 bands 14 bands 12 bands 16 bands Ch-VIS&amp;NIR 1 (pan) 3 (RGB) 3 (R,IR,pan) 4 (RGB,IR) Ch-SWIR - 3 1 2 Ch-MIR(3-4 um) 1 2 (H/L) 1 1 Ch-WV 1 2 2 3 Ch-TIR(&gt;8 um) 2 4 5 6 Spatial Res (km) 1.25/5 1-4(0.5@R) 3@nadir(1@pan) 1-2(0.5@R) Temporal Res 1 hr 15 mins 15 mins 10 mins 更多的内容可以参考相应的参考资料和研究论文（推荐参考世界气象组织WMO的网站）。 数据获取目前风云卫星数据服务网7（下指网站）是获取全系列风云卫星数据的正式途径。要获得下载数据的权限，首先需要在网站上进行注册，注册后通过检索所需数据、提交订单至服务器、等待服务器分发等步骤才可以得到最终的数据。过程和NASA/MODIS、USGS/Landsat等常见卫星数据下载方式类似，但是这里注册时需要诸多审核过程，提交订单至服务器后通常需要等待2小时左右才能下载，这些都对初次使用者增加了不少麻烦。下载时会根据你提交的订单分配相应的FTP服务（速度很快），可惜除此之外并没有提供api接口，因此利用代码进行批量下载的方式可能会需要花费更大的努力。 数据等级分类FY-4A数据遵循分级数据的规范，网站中对AGRI数据提供详细的分级后各类数据的搜索和下载指示。其中L1数据为包含定标信息的原始数据，L2数据为基于L1数据处理后的到的各类相关产品。 本数据集描述的是多通道扫描成像辐射计0级源包数据经过质量检验、地理定位、辐射定标处理后得到的预处理产品。8FY-4A中包括快速大气订正(ACI)、大气运动矢量(AMV)、对流初生实时产品(CIX)、云检测(CLM)、云相态(CLP)、云类型(CLT)、云顶高度(CTH)、云顶气压(CTP)、云顶温度(CTT)、地表下行长波辐射(DLR)、沙尘检测(DSD)、热源点检测(FHS)、雾监测 (FOG)、大气水汽总量及分层水汽含量(LPW)、地表比辐射率实时产品(LSE)、陆表温度(LST)、射出长波辐射(OLR)、降水估计(QPE)、反射短波辐射实时产品(RSR)、地面入射太阳辐射(SSI)、海表温度(SST)、对流层顶折叠检测(TFP)以及地表上行长波辐射(ULR)7。 空间尺度上，AGRI数据包含全圆盘和中国区域的两类。目前FY-4A取代FY-2G，为气象观测的主业务卫星，其定点的位置为105°E赤道上空，因而获取的全圆盘也是以此为中心的数据。 数据检索如前所述，FY-4A目前共有L1级别的10个数据集、L2L3级别的38个数据集，每种空间尺度下的产品一一对应，介绍时以全圆盘数据为例，中国区域附带说明。L1级别数据以HDF5格式存储，文件名形如下，其中内容参考附表：FY4A-_AGRI--*[LOC]*_1047E_[LEVEL]-*[TYPE]*-_MULT_NOM_*[YYYYMMDDhhmmss1]*_*[YYYYMMDDhhmmss2]*_*[SPATIAL]*_*[VERSION]*.HDF Name Meaning Args FY4A-_AGRI 卫星和传感器名称 – LOC 影像包含区域 N_DISK ; N_REGC（中国） LEVEL 数据级别 L1 TYPE* 数据类型 FDI ; GEO（几何定位） YYYYMMDDhhmmss1/2 起止时间 – SPATIAL 空间分辨率 0500M,1000M,2000M,4000M VERSION 数据版本号 目前V0001 *考虑到_静止_轨道卫星实际意义，使用的定位文件为单独下载（即与观测时间无关），下载的文件名为“Loc_Grid_Spatial.raw.gz”L2L3级别数据以netCDF格式存储，文件名形同上，差异在于Level为L2，数据类型也相应不同。 References 国家卫星气象中心-风云四号，web 多通道扫描成像辐射计(AGRI)，web 国家卫星气象中心 | 国家空间天气监测预警中心-风云四号，web An Improved Algorithm for Retrieving Land Surface Emissivity and Temperature From MSG-2/SEVIRI Data, journal, IEEE-TGRS, 2014 MSG’s SEVIRI Instrument, document Meteorological Satellite Center of JMA-Himawari, web 风云卫星数据服务网，web FY-4A成像仪L1_1KM数据格式说明, document","permalink":"http://echarlee.com/[object%20Object]/FY4A0/","photos":[]},{"tags":[{"name":"hexo-Tech","slug":"hexo-Tech","permalink":"http://echarlee.com/tags/hexo-Tech/"}],"title":"如何修改Hexo主题的字体","date":"2020/04/04","text":"网络上常见能搜到的修改Hexo字体教程多是基于NexT主题的（这个，或者这个），对于其他的主题有参考价值，但我在目前主题下做的类似尝试并没有成果。考虑到每个主题定制的内容都不太一样，选择、修改字体的方式也并不完全一致（类似的，现在在使用的Annie主题，就可以很方便的通过修改主题下的_config.yml文件实现点击出现红心效果）。因此，实现修改Hexo各类主题下字体的最好方法无外乎两种： 修改主题为NexT 了解Hexo设计架构我属于比较懒的人，所以我选择…2。主要是考虑如果能够通过了解Hexo设计架构准确掌握关于此的很多知识，或许可以为了之后更多的定制节省时间（又或者什么时候能够自己设计一套主题呢？Who knows~）如下为搜索相关内容、探索的过程1-3： 主题结构123456789101112131415161718192021222324252627282930313233343536373839404142434445.├── languages├── layout│ └── _partial│ ├── custom│ ├── plugin│ │ ├── clipboard│ │ ├── comment│ │ ├── share│ │ └── statistics│ ├── post│ └── widget├── scripts└── source ├── css │ ├── _base │ ├── _component │ │ ├── _hexotags │ │ └── _highlight │ ├── _custom │ ├── fonts │ ├── _helper │ ├── _layout │ ├── _mobile │ └── _page ├── img │ └── quote ├── js └── plugin ├── chinese ├── clipboard ├── comment ├── fancybox ├── gallerypage │ └── images ├── imagelazyloader ├── imageloaded ├── jquery ├── leancloud ├── love ├── motto ├── nicescroll ├── resizediv ├── search └── toc 可以看到，设计的主题下主要包括languages、layout、script和source这几个文件夹，分别用于配置对应主题支持的语言、页面布局、代码（函数）以及插件和资源。今天需要修改的是页面字体，因此layout和source文件夹里相关的文件是需要我重点关注的。 /layout/ 包含所有的EJS模板/source/ 包含所有的资源（CSS文件、外部脚本和库）_config.yml 包含主题配置 _config.yml配置文件涉及主题相关的配置。目前NexT主题中的config文件有专门的font setting字段用于设置，在我当前的主题中并不能如此操作，因此还需要继续查看其他两个文件夹。 layout文件夹Annie主题中借助.ejs文件用于对页面进行布局。 Hexo 内建 Swig 模板引擎，您可以另外安装插件来获得 EJS、Haml 或 Jade 支持。 source文件夹Annie主题中source文件夹包括Annie.stly、comment.stly和其他一些文件夹。相比于默认主题，Annie主题中，Annie.stly相当于程序的主函数，通过调用@import进行其他文件的导入（语法是什么？可以参考这里）。其中，导入的内容包括 1234567@import \"_helper/*\";@import \"_base/*\";@import \"_layout/*\";@import \"_page/*\";@import \"_component/*\";@import \"_mobile/*\";@import \"_custom/*\"; base文件夹-&gt;icomoon.styl中引用了自定义字体icomoon（以及博客其他地方所需的很多图标），本地文件在fonts/文件夹下存储，包括eot/svg/ttf等格式4。 helper文件夹，找到名为variable.styl，其中在font项目里便可以进行字体的修改。默认的中文字体为1$font-family-chinese = Ovo, Georgia, STZhongsong, \"Microsoft YaHei\", serif; 实际使用中会按照从前到后的顺序进行字体的搜索。如果将内容修改为其他的常见字体5，刷新hexo服务后即可以看到字体的变化。如将中文字体改为KaiTi（楷体），1$font-family-chinese = Ovo, Georgia, STZhongsong, \"Microsoft YaHei\", serif; 显示效果如下（左边为修改前，右边为修改后）除了正文字体外，Annie主题还对高亮字体（各类代码、bash命令行等）进行了单独的定义，对应变量文件存储在``./source/css/_component/_highlight`文件夹下。修改方法类似综合来看，修改字体的关键在于找到保存字体字段的文件。可以通过查找工具在主题的source文件夹下进行查找、定位。类似本文的内容还可以参考这篇教程。 Reference: hexo官方教程-模板，web 从零开始制作 Hexo 主题，web &lt;译&gt;创建一个Hexo主题-Part1:首页，web 认识 Iconfont 以及什么是 .eot、.woff、.ttf、.svg Hexo博客之改字体","permalink":"http://echarlee.com/[object%20Object]/QA2HEXO/","photos":[]},{"tags":[{"name":"deep_learning/tensorflow2.0/win10","slug":"deep-learning-tensorflow2-0-win10","permalink":"http://echarlee.com/tags/deep-learning-tensorflow2-0-win10/"}],"title":"【深度学习】 0x01：tensorflow2.0框架+SSD+Examples","date":"2020/03/31","text":"出现的零星问题 问题1：在调用matplotlib的时候居然出现了如下错误提示 ValueError: Only know how to handle extensions: [&#39;png&#39;]; with Pillow install 解决：补充安装pillow包 conda install pillow 问题2：在尝试进行训练时出现了如下错误 tensorflow错误：“tensorflow.python.framework.errors_impl.ResourceExhaustedError: OOM when allocating tensor with shape[32,256,55,55]” 解决：参考了这里的建议 总之呢，就是显卡内存不能满足此次训练，所以就是要降低所需内存要求。","permalink":"http://echarlee.com/[object%20Object]/ssd-1/","photos":[]},{"tags":[{"name":"hexo","slug":"hexo","permalink":"http://echarlee.com/tags/hexo/"}],"title":"已安装npm和node，但在命令行输入没有反应","date":"2020/03/28","text":"我的hexo本地服务器是一块树莓派，系统是Linux raspberrypi 4.19.97-v7l+，系统默认是带有git，npm和node的。但是我发现第一次通过npm安装hexo的时候居然失败了，于是我决定卸载后重装。结果再重新安装的时候发现尽管已经输入了npm或者node，但系统始终无法找到此命令（无回馈），也并没有报错。唯一可以通过linux系统“无返回即为正确”原则判断的是，npm和node已经成功安装，只是系统无法找到。因此考虑通过如下命令将npm和node关联到系统中： 1sudo ln -s /usr/local/bin/node /bin/node 当然，遇到类似安装了多个python版本无法明确系统python版本的时候，也可以用这种方法进行解决。","permalink":"http://echarlee.com/[object%20Object]/QA1HEXO/","photos":[]},{"tags":[{"name":"hexo","slug":"hexo","permalink":"http://echarlee.com/tags/hexo/"}],"title":"博客搭建更新记录","date":"2020/03/19","text":"搭建更新记录2020-02-03 购买域名 2020-03-04 重新购买VPS 2020-03-13 树莓派做主机 2020-03-16 测试生成文档 2020-03-19 修改主题 找到目标主题 切换到博客根目录，git clone 在博客根目录的_config.yml里theme字段进行配置 2020-03-19 设置分类+标签 新建分类页、标签页:1hexo new page categories 在新建的特定页中的index中加入categories，layout等标志 2020-03-28 调整主题（Current：Annie） 增加icon 增加主页图 2020-04-04修改主题：字体（改为常见字体） 曾经出现的问题 已安装npm和node，但在命令行输入没有反应 如何修改Hexo主题字体","permalink":"http://echarlee.com/[object%20Object]/updates/","photos":[]},{"tags":[{"name":"hexo","slug":"hexo","permalink":"http://echarlee.com/tags/hexo/"}],"title":"New","date":"2020/03/16","text":"尝试一点新内容！在vps的ip被封之后（换了ip又被封了），终于选择了域名+github pages了。博客打算按照每周末更新的进度，更新内容包括： 博客框架更新 树莓派应用更新 专业学习技能更新 阅读书籍更新 阅读文献及翻译更新 研究中的进展","permalink":"http://echarlee.com/[object%20Object]/New/","photos":[]},{"tags":[],"title":"Hello World","date":"2020/03/16","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","permalink":"http://echarlee.com/[object%20Object]/hello-world/","photos":[]}]}